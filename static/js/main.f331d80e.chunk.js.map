{"version":3,"sources":["logo.svg","Main.js","Aboutus.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","props","state","ip","hostname","city","region","country","location","countryCode","postal","getIpInfo","bind","IPinfo","require","this","refs","input","value","ipinfo","test","lookupIp","then","response","setState","loc","className","type","placeholder","ref","onClick","Component","Aboutus","Header","to","href","target","path","App","Boolean","window","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f331d80e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component, createRef } from 'react'\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             ip:'',\r\n             hostname:'',\r\n             city:'',\r\n             region:'',\r\n             country:'',\r\n             location:'',\r\n             countryCode:'',\r\n             postal:''\r\n        }\r\n\r\n        this.getIpInfo = this.getIpInfo.bind(this);\r\n    }\r\n    \r\n    getIpInfo(){\r\n        var IPinfo = require(\"node-ipinfo\");\r\n\r\n        let token = \"225fec19728c15\";\r\n        let ip = this.refs.input.value;\r\n        let asn = \"AS7922\";\r\n        let ipinfo = new IPinfo(token);\r\n        if(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ip)){\r\n            let info = ipinfo.lookupIp(ip).then((response) => {\r\n                this.setState({\r\n                    ip: response.ip,\r\n                    hostname: response.hostname,\r\n                    city: response.city,\r\n                    region: response.region,\r\n                    country: response.country,\r\n                    location: response.loc,\r\n                    countryCode: response.countryCode,\r\n                    postal: response.postal\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div className=\"main__inner\">\r\n                    <div className=\"main__article\">\r\n                        <p className=\"main__subtitle\">Learn about IP <span className='highlighter'>EVERYTHING</span></p>\r\n                    </div>\r\n                    <div className=\"main__input_form\">\r\n                        <input type=\"text\" placeholder='IP address' ref='input' className=\"main__input\"/>\r\n                        <button className=\"main__btn\" onClick={this.getIpInfo}>discover</button>\r\n                    </div>\r\n                    {this.state.ip != \"\" ? \r\n                        <div className=\"main__ip_info\">\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">IP adress</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.ip}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Hostname</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.hostname}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">City</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.city}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Region</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.region}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Country</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.country}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Location</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.location}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Country code</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.countryCode}</p>\r\n                            </div>\r\n                            <div className=\"main__ip_info_item\">\r\n                                <p className=\"main__ip_info_title\">Postal</p>\r\n                                <p className=\"main__ip_info_subtitle\">{this.state.postal}</p>\r\n                            </div>\r\n                        </div>\r\n                    : ''}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Aboutus extends Component {\r\n    render() {\r\n        return (\r\n            <div className='aboutus'>\r\n                <div className=\"aboutus__inner\">\r\n                    <p className=\"aboutus__title\">About Us</p>\r\n                    <p className=\"aboutus__subtitle\">We provide a web application for viewing information on IP addresses</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport Main from './Main';\r\nimport Aboutus from './Aboutus';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div className='header'>\r\n                    <div className=\"header__inner\">\r\n                        <div className=\"header__item\">\r\n                            <Link to='/' className=\"header__logo\">ip info</Link>\r\n                        </div>\r\n                        <div className=\"header__item\">\r\n                            <Link to='/aboutus' className=\"header__link\">About Us</Link>\r\n                            <a href=\"https://github.com/antoniocra04/ipinfo\" target='blank' className=\"header__btn\">Source code</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Switch>\r\n                    <Route path='/aboutus'>\r\n                        <Aboutus></Aboutus>\r\n                    </Route>\r\n                    <Route path='/'>\r\n                        <Main></Main>\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport HttpsRedirect from 'react-https-redirect';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Header from './Header';\nimport Main from './Main';\nimport './media.scss';\n\nfunction App() {\n  return (\n    <HttpsRedirect>\n      <div className=\"App\">\n        <Header></Header>\n      </div>\n    </HttpsRedirect>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}